---
title: Rendering Mermaid Diagrams on a Hugo Website Using Quarto
date: 2022-09-17
tags:
    - Quarto
    - Mermaid
category: quarto
keywords:
    - quarto
    - markdown
    - hugo
    - mermaid
---

I find a lot of the methods for drawing diagrams and flow charts using code to be a bit of a nightmare. I'm not sure what it is, perhaps I'm just a bit stupid, but they always seem a little more convoluted than I can handle. It's possible that the design is actually of some value when it comes to drawing diagrams that are much larger and more complicated than I am generally dealing with, but in my case, it always seems to be a lot of work for what little I'm trying to do.

The easiest, most intuitive way that I've come across is using a JavaScript library called Mermaid. It's just very easy, and the diagrams look great. Even better is the fact that it works with a lot of Markdown formats, and it's even one of the diagram formats that Quarto can handle. 

One issue that I came across, however, is that Mermaid diagrams don't render when you're using Quarto to create Hugo Markdown files for a Hugo website. You do have some simple options to resolve this, such as setting the ```mermaid-format``` to PNG or SVG in the article front matter, but with just a little extra work, you can get Mermaid working perfectly on your Hugo website. 

## Setting up Hugo to Support Mermaid

These next steps are detailed in the [Hugo documentation](https://gohugo.io/content-management/diagrams/), however they didn't work perfectly out of the box for me, so I've adapted the instructions slightly.

First, create a HTML file `layouts/_default/_markup/render-codeblock-mermaid.html`, and add the following code:

```html
<div class="mermaid">
  {{- .Inner | safeHTML }}
</div>
{{ .Page.Store.Set "hasMermaid" true }}
```
Following this, a snippet needs to be added to one of the partial layouts that will be used in your content pages. I added it to the `head.html` file.

```html
{{ if .Page.Store.Get "hasMermaid" }}
  <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
  <script>
    mermaid.initialize({ startOnLoad: true });
  </script>
{{ end }}
```
This can either be added to the existing theme partial, located in `themes/<theme-name>/layouts/partials`, or it can be in the global `layouts/partials` directory, which will override your theme.

With these two steps, your Hugo site should now be able to support Mermaid.

## Rendering Mermaid Using Quarto

Once you've set Hugo up to handle Mermaid code blocks, you would think it should then render like other code chunks in Quarto, but all the best things in life require hard work and perseverance. And sometimes the just okay things, like rendering a flow chart on your blog, also require a bit extra too.  

In order to get your lovely little diagram or chart to show up, you need to treat Mermaid chunks like they are rendering in Hugo rather than Quarto, which means not encasing the fenced code delimiter in curly brackets (```{mermaid}```) and instead just specifying ```mermaid```. 

For example:

````
```mermaid
graph TB
  A([Oooh]) --> B([Would You Look at This])
  B --> D[Very]
  B --> E[Fancy]
  B --> F[Flow Chart]

```
````

This will produce:

```mermaid
graph TB
  A([Oooh]) --> B([Would You Look at This])
  B --> D[Very]
  B --> E[Fancy]
  B --> F[Flow Chart]

```
## Conclusion

And that's about all you need to do. Think of all the amazing diagrams you're going to create and show the world? I, on the other hand, am going to continue to make minimal diagrams that are completely uninspiring. Have fun!