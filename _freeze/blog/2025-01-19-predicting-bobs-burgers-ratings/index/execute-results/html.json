{
  "hash": "707ea895ac2e135102083dd9741626bf",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Predicting Bob's Burgers Episode Ratings\nsubtitle: |\n  Using machine learning for the dumbest possible reasons.\ndescription-meta: |\n  Building a machine learning model in Python to predict the IMDB ratings of \n  Bob's Burgers episodes, using episode details and dialogue metrics.\ndate: 2025-01-19\nimage: bobs-burgers.webp\nimage-alt: |\n  The main characters of Bob's Burgers.\ncategories: [Machine Learning, Python]\nfig-height: 7\nfig-width: 5\nbibliography: references.bib\n---\n\n::: {#setup .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Setup Code (Click to Expand)\"}\n# import packages\nimport optuna\nimport textwrap\nimport time \nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom great_tables import GT\nfrom plotnine import (\n  aes,\n  element_blank,\n  element_line,\n  element_text,\n  facet_wrap,\n  geom_bar,\n  geom_point,\n  geom_smooth,\n  ggplot,\n  labs,\n  scale_x_continuous,\n  scale_fill_gradient,\n  theme,\n  theme_minimal,\n  theme_set,\n  theme_update\n)\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.decomposition import PCA\nfrom sklearn.dummy import DummyRegressor\nfrom sklearn.ensemble import (\n  ExtraTreesRegressor, \n  HistGradientBoostingRegressor, \n  GradientBoostingRegressor, \n  RandomForestRegressor\n)\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer, SimpleImputer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import make_scorer, root_mean_squared_error\nfrom sklearn.model_selection import cross_val_score, KFold, train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import FunctionTransformer, OneHotEncoder, OrdinalEncoder\n\n# import data\nbobs_burgers = (\n    pd.read_csv(\n        \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/\"\n        \"master/data/2024/2024-11-19/episode_metrics.csv\"\n    )\n    .merge(\n        pd.read_csv(\n            \"https://raw.githubusercontent.com/poncest/bobsburgersR/refs/\"\n            \"heads/main/data-raw/IMDb_Wikipedia_Bobs_Burgers_Data_Clean.csv\"\n        ),\n        on=[\"season\", \"episode\"]\n    )\n    .assign(\n        wikipedia_directed_by=lambda df: df['wikipedia_directed_by']\n        .str.replace(r'\\bBoohwan\\b(?! Lim)', 'Boohwan Lim', regex=True)\n        .str.replace('Brian LoSchiavo', 'Brian Loschiavo')\n        .str.replace('Mathew Long', 'Matthew Long')\n    )\n    .assign(\n        wikipedia_written_by=lambda df: df['wikipedia_written_by']\n        .str.replace('Teleplay by : ', '')\n        .str.replace('Story by : ', ' & ')\n        .str.replace('Lizzie Molyneux-Logelin', 'Lizzie Molyneux')\n        .str.replace(r'\\bLizzie\\b(?! Molyneux)', 'Lizzie Molyneux', regex=True)\n    )\n    .pipe(\n      lambda df: df.astype({col: 'category' for col in df.select_dtypes('object')})\n      )\n)\n\n# set plot theme\ntheme_set(theme_minimal(base_size=12, base_family=\"Poppins\"))\ntheme_update(\n  panel_grid_major=element_line(color=\"#e5e5e5\", size=1),\n  panel_grid_minor = element_blank(),\n  panel_spacing_x = 0.01,\n  panel_spacing_y = 0.01,\n  # panel_spacing_x = 1,\n  # panel_spacing_y = .5,\n  axis_title_x = element_text(color=\"#4d4d4d\", margin={\"t\": 5}, size=12),\n  axis_title_y = element_text(color=\"#4d4d4d\", margin={\"r\": 5}, size=12),\n  axis_text = element_text(color=\"#7f7f7f\", size=10),\n  axis_text_x = element_text(angle=30, vjust=1, hjust=.75),\n  axis_ticks = element_line(color=\"#e5e5e5\", size=.4),\n  axis_ticks_length = 1,\n  legend_position = \"top\",\n  legend_title = element_blank(),\n  legend_text = element_text(\n    size=12, va=\"center\", margin={\"t\": 5, \"r\": 5, \"b\": 0, \"l\": 5}\n  ),\n  legend_box_margin = 5,\n  legend_key_width = 20,\n  legend_key_spacing = 10,\n  plot_title = element_text(\n    ha=\"left\", color=\"black\", family=\"Lora\", size=16, margin={\"t\": 5, \"b\": 5}\n  ),\n  plot_subtitle = element_text(\n    ha=\"left\", color=\"#4d4d4d\", family=\"Lora\", lineheight=1.2, size=14, \n    margin={\"t\": 5, \"r\": 0, \"b\": 5, \"l\": 0}\n  ),\n  plot_caption = element_text(\n    color = \"#7f7f7f\", size=8, ha=\"right\", \n    margin={\"t\": 10, \"r\": 0, \"b\": 0, \"l\": 0}\n  ),\n  strip_text = element_text(size=12, margin={\"t\": 0, \"r\": 0, \"b\": 5, \"l\": 0}),\n  figure_size = (8, 6)\n)\n\n# suppress all optuna outputs\noptuna.logging.set_verbosity(optuna.logging.CRITICAL)\n# to switch back - optuna.logging.set_verbosity(logging.INFO)\n```\n:::\n\n\nBiologists have been trying to understand protein structures since the 1960s. Proteins consist of chains of amino acids that fold into complex three-dimensional structures, and this structure determines their biological function. Predicting the structure of proteins enables scientists to understand diseases and accelerate the development of medications [@heaven2022].\n\nWhile experimental methods exist for predicting protein structures, they are arduous, sometimes taking months or even years. Experimental methods are no match for the more than 200 million proteins discovered in nature [@service2020]. Since 1994, the CASP (Critical Assessment of Structure Prediction) competition sought to facilitate advancements in the computational prediction of protein structures, but no methods came close to matching the performance of experimental methods. That was, until DeepMind's [AlphaFold2](https://deepmind.google/technologies/alphafold/) was released at CASP14 [@jumper2021].\n\nCombining a huge repository of training data in the [Protein Data Bank](https://www.wwpdb.org) and significant innovations in the field of deep learning, powered by immense computational resource, DeepMind made a landmark scientific breakthrough with AlphaFold.\n\nArtificial intelligence is controversial, owing to both the perceived dangers it poses and the hype around its progress. But AlphaFold is an example of what can be achieved when you combine huge amounts of data and computational power. Data can help us solve all kinds of problems. Some of them so much less pressing than the prediction of protein structures. Like, for example, predicting the IMDB ratings of Bob's Burgers episodes. \n\nWhile the big brains at the world's best universities are busy trying to change the world, I'm creating models that no one needs and no one asked for. I will create a machine learning model that predicts IMDB ratings for Bob's Burgers epsidoes, using features that summarise the episode (episode and season number, date aired, writer, director etc.) and metrics that describe the dialogue in the episode itself. I will build a full workflow, as far as the limited sample size allows, and see how far we can get without getting more data or engineering new features. The motivation for this is just that I thought it would be fun. I'm nothing if not a silly goose.\n\nI don't know what the TV equivalent is to \"football isn't played on a spreadsheet\", but by the end of this I hope everyone is so mad they are telling me to \"watch the ~~games~~ TV\".\n\n## Data Exploration\n\nThe data I'm working with comes from the [TidyTuesday repository](https://github.com/rfordatascience/tidytuesday/tree/main/data/2024/2024-11-19). Most of the features are self-explanatory, but there's a handful of dialogue metrics that have been computed for the TidyTuesday task, and they probably need clarifying. @tbl-dialogue-metrics below shows what we're working with.\n\n::: {#tbl-dialogue-metrics}\n\n::: {#cell-dialogue-metrics .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Table Code (Click to Expand)\"}\n(\n  pd.DataFrame({\n    \"Features\": [\n      \"dialogue_density\",\n      \"avg_length\",\n      \"sentiment_variance\",\n      \"unique_words\",\n      \"question_ratio\",\n      \"exclamation_ratio\"\n      ],\n      \"Description\": [\n        \"The number of non-blank lines in this episode.\",\n        \"The average number of characters (technically codepoints) per line of \"\n        \"dialogue.\",\n        \"The variance in the numeric AFINN sentiment of words in this episode.\",\n        \"The number of unique lowercase words in this episode.\",\n        \"The proportion of lines of dialogue that contain at least one question \"\n        \"mark (\\\"?\\\").\",\n        \"The proportion of lines of dialogue that contain at least one exclamation \"\n        \"point (\\\"!\\\").\"\n        ]\n    })\n    .pipe(lambda df: GT(df))\n)\n```\n\n::: {#dialogue-metrics .cell-output .cell-output-display execution_count=2}\n```{=html}\n<div id=\"wogglzkdnz\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#wogglzkdnz table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#wogglzkdnz thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#wogglzkdnz p { margin: 0; padding: 0; }\n #wogglzkdnz .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #wogglzkdnz .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #wogglzkdnz .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #wogglzkdnz .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #wogglzkdnz .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #wogglzkdnz .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #wogglzkdnz .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #wogglzkdnz .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #wogglzkdnz .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #wogglzkdnz .gt_column_spanner_outer:first-child { padding-left: 0; }\n #wogglzkdnz .gt_column_spanner_outer:last-child { padding-right: 0; }\n #wogglzkdnz .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #wogglzkdnz .gt_spanner_row { border-bottom-style: hidden; }\n #wogglzkdnz .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #wogglzkdnz .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #wogglzkdnz .gt_from_md> :first-child { margin-top: 0; }\n #wogglzkdnz .gt_from_md> :last-child { margin-bottom: 0; }\n #wogglzkdnz .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #wogglzkdnz .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #wogglzkdnz .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #wogglzkdnz .gt_row_group_first td { border-top-width: 2px; }\n #wogglzkdnz .gt_row_group_first th { border-top-width: 2px; }\n #wogglzkdnz .gt_striped { background-color: rgba(128,128,128,0.05); }\n #wogglzkdnz .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #wogglzkdnz .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #wogglzkdnz .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #wogglzkdnz .gt_left { text-align: left; }\n #wogglzkdnz .gt_center { text-align: center; }\n #wogglzkdnz .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #wogglzkdnz .gt_font_normal { font-weight: normal; }\n #wogglzkdnz .gt_font_bold { font-weight: bold; }\n #wogglzkdnz .gt_font_italic { font-style: italic; }\n #wogglzkdnz .gt_super { font-size: 65%; }\n #wogglzkdnz .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #wogglzkdnz .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Features\">Features</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Description\">Description</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <td class=\"gt_row gt_left\">dialogue_density</td>\n    <td class=\"gt_row gt_left\">The number of non-blank lines in this episode.</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">avg_length</td>\n    <td class=\"gt_row gt_left\">The average number of characters (technically codepoints) per line of dialogue.</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">sentiment_variance</td>\n    <td class=\"gt_row gt_left\">The variance in the numeric AFINN sentiment of words in this episode.</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">unique_words</td>\n    <td class=\"gt_row gt_left\">The number of unique lowercase words in this episode.</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">question_ratio</td>\n    <td class=\"gt_row gt_left\">The proportion of lines of dialogue that contain at least one question mark (\"?\").</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">exclamation_ratio</td>\n    <td class=\"gt_row gt_left\">The proportion of lines of dialogue that contain at least one exclamation point (\"!\").</td>\n  </tr>\n</tbody>\n\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\nDialogue Metrics' Definitions\n\n:::\n\nThere are further details about the data in the TidyTuesday repository, including the following quote:\n\n> As such, our suggestion is to use the data provided to practice your data tidying and plotting techniques, and to consider for yourself what nuances might underlie these relationships.\n\nThey are definitely not wrong! If I was doing all this **properly**, I'd spend a lot more time trying to actually understand the data, particularly looking at the dialogue itself, and trying to extract more information from what is the richest data available on this topic. While I'm not sure the results would be groundbreaking, I'm sure the model would be more precise! However, I'm just a big silly goose having a little bit of fun, and seeing if I can ruin something as fun as Bob's Burgers by boiling it down to a bunch of numbers.\n\nI may be planning to chuck it all in the mixer and see what comes out, but I should do a little exploratory work first, anyway. I'm not a complete monster. To start with, we can plot the outcome distribution, with a colour gradient scale to represent seasons. IMDB ratings are approximately normally distributed, with most values between seven and eight. There are a handful of ratings that break the nine mark though.\n\n::: {#cell-season-ratings .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Plot Code (Click to Expand)\"}\n(\n  ggplot(bobs_burgers, aes(\"rating\", fill=\"factor(season)\")) + \n  geom_bar() +\n  labs(\n    title=\"Distribution of Bob's Burgers' Ratings by Season\",\n    subtitle=(\n      textwrap.fill(\n        \"The distribution of IMDB ratings for all episodes of Bob's Burgers, \"\n        \"with a gradient scale representing season (dark blue = earlier seasons; \"\n        \"light grey = later seasons). The earlier seasons of the show are generally \"\n        \"favoured.\",\n        width = 80\n      )\n    ),\n    x=\"IMDB Rating\", y=\"\",\n    caption=\"Visualisation: Paul Johnson | Data: TidyTuesday\"\n  ) +\n  scale_fill_gradient(low=\"#026E99\", high=\"#D2D2D2\", guide=None)\n  # scale_fill_manual(values=[\"#7AB5CC\", \"#026E99\", \"#FFA600\", \"#D93649\", \"#8C3431\"])\n  # theme(plot_background=element_rect(fill=\"white\"))\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/season-ratings-output-1.png){#season-ratings width=768 height=576}\n:::\n:::\n\n\nIt looks like the earlier seasons are generally higher rated than later seasons, though some of the highest ratings of all are in the later seasons. In fact, a total of five episodes have ratings that are nine or higher. Two of them are in season six, two in season 13, and one in season 14. The highest rated episode gets a 9.6, which seems rather large! It is _The Plight Before Christmas_, or episode 10 of season 13.\n\nWe can also take a little look at the correlation between all the numerical features in the dataset and the target, IMDB ratings, in @tbl-correlations.\n\n::: {#tbl-correlations}\n\n::: {#cell-correlations .cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Table Code (Click to Expand)\"}\n(\n  bobs_burgers\n  .select_dtypes(include='number') \n  .drop(columns='rating') \n  .corrwith(bobs_burgers['rating']) \n  .sort_values(ascending=False) \n  .reset_index() \n  .rename(columns={0: 'correlation', 'index': 'feature'}) \n  .pipe(lambda df:\n    GT(df, rowname_col = 'feature')\n    .fmt_number(columns='correlation', decimals=2)\n    .cols_label(correlation='Correlation')\n    .cols_align(columns='correlation', align='center') \n    .tab_options(table_width=\"100%\")\n  )\n)\n```\n\n::: {#correlations .cell-output .cell-output-display execution_count=4}\n```{=html}\n<div id=\"xospvasamh\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#xospvasamh table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#xospvasamh thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#xospvasamh p { margin: 0; padding: 0; }\n #xospvasamh .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: 100%; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #xospvasamh .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #xospvasamh .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #xospvasamh .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #xospvasamh .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #xospvasamh .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #xospvasamh .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #xospvasamh .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #xospvasamh .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #xospvasamh .gt_column_spanner_outer:first-child { padding-left: 0; }\n #xospvasamh .gt_column_spanner_outer:last-child { padding-right: 0; }\n #xospvasamh .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #xospvasamh .gt_spanner_row { border-bottom-style: hidden; }\n #xospvasamh .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #xospvasamh .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #xospvasamh .gt_from_md> :first-child { margin-top: 0; }\n #xospvasamh .gt_from_md> :last-child { margin-bottom: 0; }\n #xospvasamh .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #xospvasamh .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #xospvasamh .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #xospvasamh .gt_row_group_first td { border-top-width: 2px; }\n #xospvasamh .gt_row_group_first th { border-top-width: 2px; }\n #xospvasamh .gt_striped { background-color: rgba(128,128,128,0.05); }\n #xospvasamh .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #xospvasamh .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #xospvasamh .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #xospvasamh .gt_left { text-align: left; }\n #xospvasamh .gt_center { text-align: center; }\n #xospvasamh .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #xospvasamh .gt_font_normal { font-weight: normal; }\n #xospvasamh .gt_font_bold { font-weight: bold; }\n #xospvasamh .gt_font_italic { font-style: italic; }\n #xospvasamh .gt_super { font-size: 65%; }\n #xospvasamh .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #xospvasamh .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"\"></th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Correlation\">Correlation</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">wikipedia_viewers</th>\n    <td class=\"gt_row gt_center\">0.31</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">exclamation_ratio</th>\n    <td class=\"gt_row gt_center\">0.28</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">dialogue_density</th>\n    <td class=\"gt_row gt_center\">0.17</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">question_ratio</th>\n    <td class=\"gt_row gt_center\">0.11</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">sentiment_variance</th>\n    <td class=\"gt_row gt_center\">0.09</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">avg_length</th>\n    <td class=\"gt_row gt_center\">0.07</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">episode</th>\n    <td class=\"gt_row gt_center\">−0.06</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">unique_words</th>\n    <td class=\"gt_row gt_center\">−0.15</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">season</th>\n    <td class=\"gt_row gt_center\">−0.39</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">episode_overall</th>\n    <td class=\"gt_row gt_center\">−0.39</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">year</th>\n    <td class=\"gt_row gt_center\">−0.40</td>\n  </tr>\n</tbody>\n\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\nCorrelations Between Numeric Features & IMDB Ratings\n\n:::\n\nRatings have a moderate correlation with viewers, exclamation ratio, season, the overall episode number, and the year it was aired. I suspect season, episode overall, and year are capturing a lot of the same information.\n\nThere's definitely a couple in here that probably aren't moving the needle a whole lot, but I think we can probably go ahead and chucke them in and pretend like they're doing something. Maybe they're not completely meaningless? Maybe?\n\nUsing the `episode_overall` feature, we can plot the change in episode ratings over time. We already know from the correlations that there appears to be a moderate negative correlation between `episode_overall` (and the other variables that are capturing time) and ratings, as shown below.\n\n::: {#cell-episode-ratings .cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Plot Code (Click to Expand)\"}\n(\n  ggplot(bobs_burgers, aes(x=\"episode_overall\", y=\"rating\")) + \n  geom_point(size=2, stroke=0.5, fill=\"white\", color=\"#343a40\", shape=\"o\") +\n  geom_smooth(method='lm', size=1, se=False, color=\"#026E99\") +\n  scale_x_continuous(breaks=[0,50,100,150,200,250]) +\n  labs(\n    title=\"Bob's Burgers Ratings Over Time\",\n    subtitle=(\n      textwrap.fill(\n        \"The variance in IMDB ratings of Bob's Burgers' episodes over time. \"\n        \"There has been a small but steady decline in ratings since the early \"\n        \"seasons, with the first sub-seven ratingscoming after 150 episodes.\",\n        width = 78\n      )\n    ),\n    x=\"Episode\", y=\"IMDB Rating\",\n    caption=\"Visualisation: Paul Johnson | Data: TidyTuesday\"\n  )\n  # theme(plot_background=element_rect(fill=\"white\"))\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/episode-ratings-output-1.png){#episode-ratings width=768 height=576}\n:::\n:::\n\n\nAt the other end of @tbl-correlations, there is a moderate positive correlation between ratings and viewership. This is a relationship you'd expect to observe, though I'm not sure you'd expect it to be more than a noisy signal. The plot below visualises the relationship between ratings and viewership.\n\n::: {#cell-viewers-ratings .cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Plot Code (Click to Expand)\"}\n(\n  ggplot(bobs_burgers, aes(x=\"wikipedia_viewers\", y=\"rating\")) + \n  geom_point(size=2, stroke=0.5, fill=\"white\", color=\"#343a40\", shape=\"o\") +\n  geom_smooth(method='lm', size=1, se=False, color=\"#026E99\") +\n  labs(\n    title=\"Bob's Burgers' Ratings by Total Viewers\",\n    subtitle=(\n      textwrap.fill(\n        \"The variance in IMDB ratings of Bob's Burgers' episodes by viewership. \"\n        \"While it is noisy, there does appear to be a small, positive association \"\n        \"between viewing figures and the episode rating.\",\n        width = 78\n      )\n    ),\n    x=\"Viewers (Millions)\", y=\"IMDB Rating\",\n    caption=\"Visualisation: Paul Johnson | Data: TidyTuesday\"\n  )\n  # theme(plot_background=element_rect(fill=\"white\"))\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/viewers-ratings-output-1.png){#viewers-ratings width=768 height=576}\n:::\n:::\n\n\nThere's one huge outlier in there that pushes the x-axis out a lot further. It turns out that the first episode of Bob's Burgers hit a peak, in terms of viewership, that the show hasn't matched since. It reached over nine million viewers, and almost three million more than any other episode. Excluding that episode, there does appear to be a positive association between viewership and ratings, though it is noisy.\n\nIf viewership has any relationship with ratings, it is likely serving as a proxy for the quality of the episode. The assumed mechanism is that word spreads about the best episodes and this attracts viewers (though I think viewership may just be on the night it is aired, so maybe this is wrong and I need to rethink the mechanism). \n\nThe dialogue metrics are intended to capture characteristics of the episode itself and the assumption is that these characteristics will contribute to the episode's quality (and thereefore ratings). The plots below show that the dialogue metrics are noisy and, where there might be any signal, it is limited.\n\n::: {#cell-metric-ratings .cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Plot Code (Click to Expand)\"}\n(\n  bobs_burgers.melt(\n    id_vars=['rating'],  # Keep 'rating' as the identifier column\n    value_vars=[\n      'dialogue_density', 'avg_length', 'sentiment_variance', \n      'unique_words', 'question_ratio', 'exclamation_ratio'\n      ],\n    var_name='label',  # New column for labels\n    value_name='value'  # New column for values\n    )\n    .assign(\n      label=lambda df: df['label']\n        .str.replace('_', ' ')  # Replace underscores with spaces\n        .str.title()           # Convert to titlecase\n        .str.replace('Avg', 'Average', case=False)  # Replace 'Avg' with 'Average'\n    )\n    .pipe(\n      lambda df: \n        ggplot(df, aes(x='value', y='rating', group=1)) +\n        geom_point(size=2, stroke=0.5, fill=\"white\", color=\"#343a40\", shape=\"o\") +\n        geom_smooth(method='lm', size=1, se=False, color=\"#026E99\") +\n        facet_wrap('~label', scales='free_x') +\n        labs(\n          title=\"Bob's Burgers' Ratings by Dialogue Metrics\",\n          subtitle=(\n            textwrap.fill(\n              \"There is a small positive correlation between the proportion of \"\n              \"lines of dialogue in Bob's Burgers episodes containing exclamation \"\n              \"points and their IMDB ratings.\",\n              width = 78\n            )\n          ),\n        x=\"\", y=\"IMDB Rating\",\n        caption=\"Visualisation: Paul Johnson | Data: TidyTuesday\"\n      )\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/metric-ratings-output-1.png){#metric-ratings width=768 height=576}\n:::\n:::\n\n\nWhile certainly metrics like dialogue density appear to offer nothing, exclamation ratio and unique words do appear to offer some signal that might help us predict ratings. If I squint I can see some interesting patterns in question ratio and sentiment variance but I think there's really nothing there. They may add some interactive effect with other metrics though (he says, hopefully).\n\nFinally, having focused on picking out the strong correlations observed in @tbl-correlations, we've ignored the categorical variables that may be relevant. I don't think many of these will add much value, but I think director and writers are probably pretty relevant! @tbl-director-ratings & @tbl-writer-ratings below show the total episodes and average rating for each director and writer credited on at least five Bob's Burgers episodes.\n\n::: {.panel-tabset}\n\n### Director Ratings\n\n:::: {#tbl-director-ratings}\n\n::: {#cell-director-ratings .cell execution_count=8}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Table Code (Click to Expand)\"}\n(\n  bobs_burgers\n  .assign(wikipedia_directed_by=lambda df: df['wikipedia_directed_by'].str.split(' & ')) \n  .explode('wikipedia_directed_by')\n  .groupby('wikipedia_directed_by')\n  .agg(episodes=('wikipedia_directed_by', 'size'), average_rating=('rating', 'mean')) \n  .query('episodes >= 5')\n  .sort_values(by='average_rating', ascending=False)\n  .reset_index() \n  .pipe(lambda df:\n    GT(df, rowname_col='wikipedia_directed_by')\n    .fmt_number(columns='average_rating', decimals=2)\n    .cols_label(\n      episodes='Total Episodes Directed',\n      average_rating='Average Episode Rating'\n    )\n    .cols_align(columns=['episodes', 'average_rating'], align='center')\n    .tab_options(table_width=\"100%\")\n  )\n)\n```\n\n::: {#director-ratings .cell-output .cell-output-display execution_count=8}\n```{=html}\n<div id=\"plsvxfaqss\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#plsvxfaqss table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#plsvxfaqss thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#plsvxfaqss p { margin: 0; padding: 0; }\n #plsvxfaqss .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: 100%; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #plsvxfaqss .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #plsvxfaqss .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #plsvxfaqss .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #plsvxfaqss .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #plsvxfaqss .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #plsvxfaqss .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #plsvxfaqss .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #plsvxfaqss .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #plsvxfaqss .gt_column_spanner_outer:first-child { padding-left: 0; }\n #plsvxfaqss .gt_column_spanner_outer:last-child { padding-right: 0; }\n #plsvxfaqss .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #plsvxfaqss .gt_spanner_row { border-bottom-style: hidden; }\n #plsvxfaqss .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #plsvxfaqss .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #plsvxfaqss .gt_from_md> :first-child { margin-top: 0; }\n #plsvxfaqss .gt_from_md> :last-child { margin-bottom: 0; }\n #plsvxfaqss .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #plsvxfaqss .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #plsvxfaqss .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #plsvxfaqss .gt_row_group_first td { border-top-width: 2px; }\n #plsvxfaqss .gt_row_group_first th { border-top-width: 2px; }\n #plsvxfaqss .gt_striped { background-color: rgba(128,128,128,0.05); }\n #plsvxfaqss .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #plsvxfaqss .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #plsvxfaqss .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #plsvxfaqss .gt_left { text-align: left; }\n #plsvxfaqss .gt_center { text-align: center; }\n #plsvxfaqss .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #plsvxfaqss .gt_font_normal { font-weight: normal; }\n #plsvxfaqss .gt_font_bold { font-weight: bold; }\n #plsvxfaqss .gt_font_italic { font-style: italic; }\n #plsvxfaqss .gt_super { font-size: 65%; }\n #plsvxfaqss .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #plsvxfaqss .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"\"></th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Total Episodes Directed\">Total Episodes Directed</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Average Episode Rating\">Average Episode Rating</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Jennifer Coyle</th>\n    <td class=\"gt_row gt_center\">19</td>\n    <td class=\"gt_row gt_center\">8.07</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Kyounghee Lim</th>\n    <td class=\"gt_row gt_center\">15</td>\n    <td class=\"gt_row gt_center\">8.00</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Boohwan Lim</th>\n    <td class=\"gt_row gt_center\">15</td>\n    <td class=\"gt_row gt_center\">7.95</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Bernard Derriman</th>\n    <td class=\"gt_row gt_center\">9</td>\n    <td class=\"gt_row gt_center\">7.89</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Mauricio Pardo</th>\n    <td class=\"gt_row gt_center\">6</td>\n    <td class=\"gt_row gt_center\">7.87</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Anthony Chun</th>\n    <td class=\"gt_row gt_center\">8</td>\n    <td class=\"gt_row gt_center\">7.86</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Tyree Dillihay</th>\n    <td class=\"gt_row gt_center\">32</td>\n    <td class=\"gt_row gt_center\">7.86</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Don MacKinnon</th>\n    <td class=\"gt_row gt_center\">12</td>\n    <td class=\"gt_row gt_center\">7.85</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Wes Archer</th>\n    <td class=\"gt_row gt_center\">7</td>\n    <td class=\"gt_row gt_center\">7.77</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Brian Loschiavo</th>\n    <td class=\"gt_row gt_center\">23</td>\n    <td class=\"gt_row gt_center\">7.76</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Ian Hamilton</th>\n    <td class=\"gt_row gt_center\">11</td>\n    <td class=\"gt_row gt_center\">7.65</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Chris Song</th>\n    <td class=\"gt_row gt_center\">47</td>\n    <td class=\"gt_row gt_center\">7.60</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Matthew Long</th>\n    <td class=\"gt_row gt_center\">18</td>\n    <td class=\"gt_row gt_center\">7.53</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Ryan Mattos</th>\n    <td class=\"gt_row gt_center\">26</td>\n    <td class=\"gt_row gt_center\">7.49</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Tom Riggin</th>\n    <td class=\"gt_row gt_center\">19</td>\n    <td class=\"gt_row gt_center\">7.36</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Simon Chong</th>\n    <td class=\"gt_row gt_center\">9</td>\n    <td class=\"gt_row gt_center\">7.31</td>\n  </tr>\n</tbody>\n\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\nIMDB Ratings by Director\n\n::::\n\n### Writer Ratings\n\n:::: {#tbl-writer-ratings}\n\n::: {#cell-writer-ratings .cell execution_count=9}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Table Code (Click to Expand)\"}\n(\n  bobs_burgers\n  .assign(wikipedia_written_by=lambda df: df['wikipedia_written_by'].str.split(' & ')) \n  .explode('wikipedia_written_by') \n  .groupby('wikipedia_written_by') \n  .agg(episodes=('wikipedia_written_by', 'size'), average_rating=('rating', 'mean'))\n  .query('episodes >= 5')\n  .sort_values(by='average_rating', ascending=False)\n  .reset_index()\n  .pipe(lambda df:\n    GT(df, rowname_col='wikipedia_written_by')\n    .fmt_number(columns='average_rating', decimals=2)\n    .cols_label(\n      episodes='Total Episodes Written',\n      average_rating='Average Episode Rating'\n    )\n    .cols_align(columns=['episodes', 'average_rating'], align='center')\n    .tab_options(table_width=\"100%\")\n  )\n)\n```\n\n::: {#writer-ratings .cell-output .cell-output-display execution_count=9}\n```{=html}\n<div id=\"oixeumwbks\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#oixeumwbks table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#oixeumwbks thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#oixeumwbks p { margin: 0; padding: 0; }\n #oixeumwbks .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: 100%; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #oixeumwbks .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #oixeumwbks .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #oixeumwbks .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #oixeumwbks .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #oixeumwbks .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #oixeumwbks .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #oixeumwbks .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #oixeumwbks .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #oixeumwbks .gt_column_spanner_outer:first-child { padding-left: 0; }\n #oixeumwbks .gt_column_spanner_outer:last-child { padding-right: 0; }\n #oixeumwbks .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #oixeumwbks .gt_spanner_row { border-bottom-style: hidden; }\n #oixeumwbks .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #oixeumwbks .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #oixeumwbks .gt_from_md> :first-child { margin-top: 0; }\n #oixeumwbks .gt_from_md> :last-child { margin-bottom: 0; }\n #oixeumwbks .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #oixeumwbks .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #oixeumwbks .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #oixeumwbks .gt_row_group_first td { border-top-width: 2px; }\n #oixeumwbks .gt_row_group_first th { border-top-width: 2px; }\n #oixeumwbks .gt_striped { background-color: rgba(128,128,128,0.05); }\n #oixeumwbks .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #oixeumwbks .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #oixeumwbks .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #oixeumwbks .gt_left { text-align: left; }\n #oixeumwbks .gt_center { text-align: center; }\n #oixeumwbks .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #oixeumwbks .gt_font_normal { font-weight: normal; }\n #oixeumwbks .gt_font_bold { font-weight: bold; }\n #oixeumwbks .gt_font_italic { font-style: italic; }\n #oixeumwbks .gt_super { font-size: 65%; }\n #oixeumwbks .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #oixeumwbks .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"\"></th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Total Episodes Written\">Total Episodes Written</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Average Episode Rating\">Average Episode Rating</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Loren Bouchard</th>\n    <td class=\"gt_row gt_center\">7</td>\n    <td class=\"gt_row gt_center\">8.30</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Lizzie Molyneux</th>\n    <td class=\"gt_row gt_center\">29</td>\n    <td class=\"gt_row gt_center\">7.87</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Wendy Molyneux</th>\n    <td class=\"gt_row gt_center\">29</td>\n    <td class=\"gt_row gt_center\">7.87</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Steven Davis</th>\n    <td class=\"gt_row gt_center\">28</td>\n    <td class=\"gt_row gt_center\">7.86</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Kelvin Yu</th>\n    <td class=\"gt_row gt_center\">25</td>\n    <td class=\"gt_row gt_center\">7.86</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Greg Thompson</th>\n    <td class=\"gt_row gt_center\">21</td>\n    <td class=\"gt_row gt_center\">7.80</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Dan Fybel</th>\n    <td class=\"gt_row gt_center\">27</td>\n    <td class=\"gt_row gt_center\">7.73</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Nora Smith</th>\n    <td class=\"gt_row gt_center\">18</td>\n    <td class=\"gt_row gt_center\">7.73</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Jon Schroeder</th>\n    <td class=\"gt_row gt_center\">25</td>\n    <td class=\"gt_row gt_center\">7.66</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Rich Rinaldi</th>\n    <td class=\"gt_row gt_center\">28</td>\n    <td class=\"gt_row gt_center\">7.63</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Scott Jacobson</th>\n    <td class=\"gt_row gt_center\">26</td>\n    <td class=\"gt_row gt_center\">7.60</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Holly Schlesinger</th>\n    <td class=\"gt_row gt_center\">28</td>\n    <td class=\"gt_row gt_center\">7.58</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Katie Crown</th>\n    <td class=\"gt_row gt_center\">11</td>\n    <td class=\"gt_row gt_center\">7.28</td>\n  </tr>\n</tbody>\n\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\nIMDB Ratings by Writer\n\n::::\n\n:::\n\nIt looks like the directors and writers do matter! There's some variance in ratings across both directors and writers, and it is definitely a reasonable assumption that these should have an impact on the ratings and improve model performance.\n\nThis quick exploratory glimpse at the data has at least demonstrated that IMDB ratings are not entirely random. The results don't fill me with confidence either, but we've got some interesting features to work with.\n\n## Data Preparation\n\nHaving already decided that I'm not going to do any feature engineering, the data preparation steps are a little less cumbersome. I'm sure there are a lot of potential gains in creating new features, particularly from the dialogue, but today we are just taking shortcuts. Instead, we just need to partition the data and then do some preprocessing. \n\n### Train/Test Split\n\nIn addition to the lack of feature engineering, I've taken some shortcuts in terms of the partitioning. I should have done this before doing the exploratory work, but we didn't really have enough data to get away with splitting it up before doing some exploration. Is it any wonder they suggested this dataset should be used for wrangling or visualisation?\n\n::: {#train-test-split .cell execution_count=10}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Data Code (Click to Expand)\"}\nX_train, X_test, y_train, y_test = (\n  train_test_split(\n    bobs_burgers.drop(['rating'], axis=1), \n    bobs_burgers['rating'], \n    test_size=0.3, random_state=42\n    )\n  )\n```\n:::\n\n\nThe data has been partitioned into train and test sets, with the test set making up 30% of the data. Just as I didn't have enough data to be splitting everything up before the exploratory work, there isn't enough data to really get away with a validation set either. So here we are. I'm being a silly goose. Is that a crime? Are you going to arrest me for being a silly goose? I certainly hope not.\n\n### Data Preprocessing\n\n::: {#explode-encode-class .cell execution_count=11}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Class Code (Click to Expand)\"}\nclass ExplodeAndEncode(TransformerMixin, BaseEstimator):\n    def __init__(self, min_frequency=3):\n        self.min_frequency = min_frequency  # Store min_frequency as an instance variable\n        self.ohe_directors = OneHotEncoder(\n            handle_unknown='ignore', sparse_output=False, min_frequency=self.min_frequency\n        )\n        self.ohe_writers = OneHotEncoder(\n            handle_unknown='ignore', sparse_output=False, min_frequency=self.min_frequency\n        )\n\n    def fit(self, X, y=None):\n        # Ensure X is a DataFrame\n        if not isinstance(X, pd.DataFrame):\n            raise ValueError(\"Input to ExplodeAndEncode must be a DataFrame.\")\n\n        # Fit encoders to the expanded and encoded columns\n        directors_encoded = self._expand_and_encode(X['wikipedia_directed_by'])\n        writers_encoded = self._expand_and_encode(X['wikipedia_written_by'])\n\n        self.ohe_directors.fit(directors_encoded)\n        self.ohe_writers.fit(writers_encoded)\n        return self\n\n    def transform(self, X, y=None):\n        # Ensure X is a DataFrame\n        if not isinstance(X, pd.DataFrame):\n            raise ValueError(\"Input to ExplodeAndEncode must be a DataFrame.\")\n\n        # Transform using fitted encoders\n        transformed_directors = self.ohe_directors.transform(self._expand_and_encode(X['wikipedia_directed_by']))\n        transformed_writers = self.ohe_writers.transform(self._expand_and_encode(X['wikipedia_written_by']))\n\n        # Combine transformed features\n        return np.hstack([transformed_directors, transformed_writers])\n\n    def _expand_and_encode(self, series):\n        # Handle Categorical dtype\n        if isinstance(series.dtype, pd.CategoricalDtype):\n            # Add 'Unknown' to categories if not already present\n            if 'Unknown' not in series.cat.categories:\n                series = series.cat.add_categories(['Unknown'])\n        \n        # Fill missing values with 'Unknown'\n        series = series.fillna('Unknown')\n\n        # Split, sort, and rejoin the categories\n        expanded = series.str.split(' & ').apply(lambda x: sorted(set(x)))\n        return expanded.str.join(' & ').values.reshape(-1, 1)\n```\n:::\n\n\n::: {#preprocessing .cell execution_count=12}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Data Code (Click to Expand)\"}\ncategorical_features = ['wikipedia_written_by', 'wikipedia_directed_by']\nordinal_features = ['season', 'episode']\nnumeric_features = [\n  'dialogue_density', 'unique_words', 'question_ratio', 'exclamation_ratio',\n  'episode_overall', 'wikipedia_viewers', 'avg_length', 'sentiment_variance', \n  ]\n\nordinal_transformer = Pipeline(steps=[\n  ('ordinal', OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1))\n])\n\ncategorical_transformer = Pipeline(steps=[\n    ('explode_encode', ExplodeAndEncode(min_frequency=1))\n  ]\n)\n\nnumeric_transformer = Pipeline(steps=[\n  ('imputer', IterativeImputer())\n  ]\n)\n\ncol_transformer = ColumnTransformer(\n    transformers=[\n        ('ord', ordinal_transformer, ordinal_features),\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)\n    ]\n)\n\npreprocessor = Pipeline(\n  steps=[\n    ('col_transformer', col_transformer),\n    ('pca', PCA(n_components=4))\n    ]\n  )\n```\n:::\n\n\nThere are several necessary preprocessing steps that need to be included in the model pipeline. I have split the features up into categorical, ordinal, and numeric, and missing values are imputed using slightly different methods depending on the data type. The most involved of the three processes is the categorical features, which are the writers and directors credited for each episode. Many episodes have multiple writers and/or directors, which requires splitting out the values for both features to capture each writer and director individually using one-hot encoding, in addition to addressing inconsistencies in formatting across values for both feature and handling missing values. All taken together, I wasn't entirely sure what the best approach would be to implement these steps. I ended up using ChatGPT to save me the bother, which returned this handy little Python class that explodes the two columns before doing the encoding. I haven't had a ton of experience building custom transformers like this, but the appraoch seems pretty intuitive. Thanks ChatGPT, I'm sure you won't ever do anything to hurt me like make things up or take my job and do it even worse than I do.\n\nThe final step in the preprocessing pipeline is a principal component analysis, which reduces some unhelpful sparsity in the data. The dataset is reduced to four components which capture the vast majority of the variance.\n\n\n\n## Model Training\n\nI'll start with a couple baseline models to compare against. This is always a good starting point, but it's especially worthwhile when there's a reasonable chance your model is going to be garbage. You need to make sure you are at **least** able to build a model that performs better than taking the most basic baseline predictions.\n\nThe first baseline model predicts that all test set values will equal the mean value of IMDB ratings in the training set. \n\n::: {#baseline-model .cell execution_count=15}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Model Code (Click to Expand)\"}\nbaseline_model = DummyRegressor(strategy='mean')\n\nbaseline_model.fit(X_train, y_train)\n\ny_pred = baseline_model.predict(X_test)\n\nbaseline_rmse = root_mean_squared_error(y_test, y_pred)\n# print(f\"Baseline RMSE: {baseline_rmse:.3f}\")\n```\n:::\n\n\nThe RMSE for the baseline model is **0\\.430**. This gives us a target to try and beat. If we can't do better than this, our model is literally worthless.\n\nNow, lets see how a relatively simple model performs, both as a comparison against the baseline, and to help evaluate whether anything more complex model is worth the effort.\n\n::: {#linear-regression .cell execution_count=16}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Model Code (Click to Expand)\"}\npipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                           ('regressor', LinearRegression())])\n\npipeline.fit(X_train, y_train)\n\ny_pred = pipeline.predict(X_test)\n\nlm_rmse = root_mean_squared_error(y_test, y_pred)\n```\n:::\n\n\nThe linear regression returns a score of **0\\.381**, which beats the baseline. We can use both these models as a good starting point. \n\n### Model Selection\n\nThe next step, having established some useful baselines, is to identify the algorithm that should give us the best shot. I decided to stick with algorithms provided by scikit-learn, choosing random forest, extra trees, histogram-based gradient boosting, and gradient boosting. I am testing the performance of each of these algorithms using Optuna, carrying a study that tests each algorithm with some relatively simple hyperparameters to identify the one that is most likely to give us the best performance.\n\n::: {#model-selection .cell cache='true' execution_count=17}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Model Code (Click to Expand)\"}\nrmse_scorer = make_scorer(root_mean_squared_error, greater_is_better=False)\n\ndef objective(trial):\n    regressor_name = trial.suggest_categorical('regressor', ['RandomForest', 'ExtraTrees', 'HistGradientBoosting', 'GradientBoosting'])\n    \n    if regressor_name == 'RandomForest':\n        max_depth = trial.suggest_int(\"max_depth\", 3, 10)\n        n_estimators = trial.suggest_int(\"n_estimators\", 100, 500, step=50)\n        model = RandomForestRegressor(max_depth=max_depth, n_estimators=n_estimators)\n    \n    elif regressor_name == 'ExtraTrees':\n        max_depth = trial.suggest_int(\"max_depth\", 3, 10)\n        n_estimators = trial.suggest_int(\"n_estimators\", 100, 500, step=50)\n        model = ExtraTreesRegressor(max_depth=max_depth, n_estimators=n_estimators)\n    \n    elif regressor_name == 'HistGradientBoosting':\n        max_depth = trial.suggest_int(\"max_depth\", 3, 10)\n        max_iter = trial.suggest_int(\"max_iter\", 100, 500, step=50)\n        learning_rate = trial.suggest_float(\"learning_rate\", 0.01, 0.5, log=True)\n        model = HistGradientBoostingRegressor(max_depth=max_depth, max_iter=max_iter, learning_rate=learning_rate)\n    \n    else:  # GradientBoosting\n        max_depth = trial.suggest_int(\"max_depth\", 3, 10)\n        n_estimators = trial.suggest_int(\"n_estimators\", 100, 500, step=50)\n        learning_rate = trial.suggest_float(\"learning_rate\", 0.01, 0.5, log=True)\n        model = GradientBoostingRegressor(max_depth=max_depth, n_estimators=n_estimators, learning_rate=learning_rate)\n    \n    # Create a pipeline\n    pipeline = Pipeline([\n        ('preprocesser', preprocessor),\n        ('regressor', model)\n    ])\n\n    # cross-validation\n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n    scores = cross_val_score(pipeline, X_train, np.ravel(y_train), cv=kf, scoring=rmse_scorer)\n    \n    # Return the mean RMSE (negative because `greater_is_better=False`)\n    return -scores.mean()\n\n# Optimization\nselection_study = optuna.create_study(direction='minimize')\nselection_study.optimize(objective, n_trials=100, timeout=600)\n\n# Best results\n# print(f\"Best Model: {study.best_params.get('regressor')}\")\n```\n:::\n\n\nThe study suggests the best model to go with is **ExtraTrees**.\n\n### Hyperparameter Tuning\n\nHaving selected the algorithm we want to work with, we can carry out some more rigorous hyperparameter tuning.\n\n::: {#extra-trees .cell cache='true' execution_count=18}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Model Code (Click to Expand)\"}\nrmse_scorer = make_scorer(root_mean_squared_error, greater_is_better=False)\n\ndef objective(trial):\n\n    n_estimators = trial.suggest_int(\"n_estimators\", 100, 250)\n    criterion = trial.suggest_categorical('criterion', ['poisson', 'friedman_mse', 'squared_error'])\n    max_depth = trial.suggest_int(\"max_depth\", 10, 15)\n    min_samples_split = trial.suggest_int(\"min_samples_split\", 5, 10)\n    max_features = trial.suggest_categorical(\"max_features\", [\"sqrt\", \"log2\", None])\n    # min_impurity_decrease = trial.suggest_float(\"min_impurity_decrease\", 0, 1e-5)\n\n    model = ExtraTreesRegressor(\n        n_estimators=n_estimators,\n        criterion=criterion,\n        max_depth=max_depth,\n        min_samples_split=min_samples_split,\n        max_features=max_features,\n        # min_impurity_decrease=min_impurity_decrease,\n        random_state=42\n    )\n    \n    pipeline = Pipeline([\n        ('preprocessor', preprocessor),\n        ('regressor', model)\n    ])\n\n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n    scores = cross_val_score(pipeline, X_train, np.ravel(y_train), cv=kf, scoring=rmse_scorer)\n\n    return -scores.mean()\n\ntuning_study = optuna.create_study(direction='minimize')\ntuning_study.optimize(objective, n_trials=250, timeout=600)\n\n# print(f\"Best ExtraTrees Trial: **{study.best_trial.value:.3f}**\\n\")\n# print(\"Using the following hyperparameter values:\\n\")\n# for param, value in study.best_params.items():\n#     print(f\"- {param}: {value}\\n\")\n```\n:::\n\n\nThe tuned ExtraTrees model produces an RMSE of 0\\.395. @tbl-hyperparameters below shows the tuned hyperparameter values.\n\n::: {#tbl-hyperparameters}\n\n::: {#cell-tuned-hyperparameters .cell execution_count=19}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Table Code (Click to Expand)\"}\n(\n  GT(\n    pd.DataFrame(\n      tuning_study.best_trial.params.items(), \n      columns=[\"Hyperparameter\", \"Value\"]\n      )\n      .fillna(\"None\")\n  )\n  .tab_options(table_width=\"100%\")\n)\n```\n\n::: {#tuned-hyperparameters .cell-output .cell-output-display execution_count=19}\n```{=html}\n<div id=\"pzrtsusndr\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#pzrtsusndr table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#pzrtsusndr thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#pzrtsusndr p { margin: 0; padding: 0; }\n #pzrtsusndr .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: 100%; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #pzrtsusndr .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #pzrtsusndr .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #pzrtsusndr .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #pzrtsusndr .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #pzrtsusndr .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #pzrtsusndr .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #pzrtsusndr .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #pzrtsusndr .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #pzrtsusndr .gt_column_spanner_outer:first-child { padding-left: 0; }\n #pzrtsusndr .gt_column_spanner_outer:last-child { padding-right: 0; }\n #pzrtsusndr .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #pzrtsusndr .gt_spanner_row { border-bottom-style: hidden; }\n #pzrtsusndr .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #pzrtsusndr .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #pzrtsusndr .gt_from_md> :first-child { margin-top: 0; }\n #pzrtsusndr .gt_from_md> :last-child { margin-bottom: 0; }\n #pzrtsusndr .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #pzrtsusndr .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #pzrtsusndr .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #pzrtsusndr .gt_row_group_first td { border-top-width: 2px; }\n #pzrtsusndr .gt_row_group_first th { border-top-width: 2px; }\n #pzrtsusndr .gt_striped { background-color: rgba(128,128,128,0.05); }\n #pzrtsusndr .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #pzrtsusndr .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #pzrtsusndr .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #pzrtsusndr .gt_left { text-align: left; }\n #pzrtsusndr .gt_center { text-align: center; }\n #pzrtsusndr .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #pzrtsusndr .gt_font_normal { font-weight: normal; }\n #pzrtsusndr .gt_font_bold { font-weight: bold; }\n #pzrtsusndr .gt_font_italic { font-style: italic; }\n #pzrtsusndr .gt_super { font-size: 65%; }\n #pzrtsusndr .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #pzrtsusndr .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Hyperparameter\">Hyperparameter</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Value\">Value</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <td class=\"gt_row gt_left\">n_estimators</td>\n    <td class=\"gt_row gt_left\">134</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">criterion</td>\n    <td class=\"gt_row gt_left\">friedman_mse</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">max_depth</td>\n    <td class=\"gt_row gt_left\">11</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">min_samples_split</td>\n    <td class=\"gt_row gt_left\">8</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">max_features</td>\n    <td class=\"gt_row gt_left\">None</td>\n  </tr>\n</tbody>\n\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\nTuned Hyperparameter Values from Optuna Study\n\n:::\n\n\n## Model Evaluation\n\nFinally, having tuned the hyperparameters, we should hopefully have a model that will give us the best performance available on our test set.\n\n::: {#final-model .cell cache='true' execution_count=21}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Model Code (Click to Expand)\"}\nbest_params = tuning_study.best_params\n\nbest_extra_trees = ExtraTreesRegressor(\n    n_estimators=best_params['n_estimators'],\n    criterion=best_params['criterion'],\n    max_depth=best_params['max_depth'],\n    min_samples_split=best_params['min_samples_split'],\n    max_features=best_params['max_features'],\n    # min_impurity_decrease=best_params['min_impurity_decrease'],\n    random_state=42\n)\n\npipeline = Pipeline([\n    ('preprocessor', preprocessor),\n    ('regressor', best_extra_trees)\n])\n\n# Fit the pipeline to the training data\npipeline.fit(X_train, np.ravel(y_train))\n\n# Predict on the test set\ny_pred = pipeline.predict(X_test)\n\n# Evaluate RMSE on the test set\nextra_trees_rmse = root_mean_squared_error(np.ravel(y_test), y_pred)\n# print(f\"Test RMSE: {test_rmse:.3f}\")\n```\n:::\n\n\nThe model improves on the baseline RMSE of **0\\.430** to achieve an RMSE of **0\\.368**. That is a ~15% decrease. This is not nothing! \n\nInterestingly, the linear regression with full preprocessing manages to achieve an RMSE of **0\\.381**, which really isn't that far off the performance we achieve with our final model. If I was to take this further, for example to put this into production, I'd be inclined to back the linear model.\n\n## Final Thoughts\n\nWas this a good use of my time? No, but did we learn something? Also no[^ExtraTrees]. Perhaps there's a moral to this story? Still, no. If you were hoping for a big reveal that makes the time you invested in reading this worth it, then I regret to inform you that I'm not nearly that clever. It really was a big dumb blog post.\n\nObviously, as stated straight out the gates, this isn't how I'd go about this task if it was any less than a silly post for a silly goose. I would spend a lot more time on the exploratory end really getting to know the data and questioning whether there's enough here to build a model that's worth the effort it took to make it. There'd probably be some time spent trying to model this as an explanatory task. Only after doing all this and convincing myself that there's enough signal here that we might actually be able to predict episode ratings reaonsably well would I then consider building a predictive model.\n\nThere is inevitably an almost infinite number of features that could be extracted from the dialogue and the various dialogue metrics that have already been created. If I was to go a little further, I'd look at the synposis text and see if there's signal in there. I did have a little look at sentiment and it didn't seem like there was much there, but I could also look at the frequency of certain named entities, or do some topic modelling. I imagine there's also more that could be extracted from the actual dialogue, if we went back and grabbed that.\n\n[^ExtraTrees]:\n\n    That's a lie. I've never used ExtraTrees before, so I learned a little playing around with it. Still, I'm not sure this meets the level for claiming to have learned something...\n\n## Support {.appendix}\n\nIf you enjoyed this blog post and would like to support my work, you can [buy me a coffee or a beer or give me a tip](https://www.buymeacoffee.com/paulj1989) as a thank you. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}